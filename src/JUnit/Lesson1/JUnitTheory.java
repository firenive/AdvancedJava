package JUnit.Lesson1;

public class JUnitTheory {
        /* 1) каждый тестовый сценарий (test case) отдельный метод (обязательно public void). Методы помечают аннотацией Test
        *  2) Существуют вспомогательные методы с аннотациями @Before, @BeforeClass, @After, @AfterClass
        *  3) Тестовый класс необходимо называть с суффиксом Test (например Vector2DTest)
        *  4) Тестовые методы желательно содержат 'should' в названии (Например sumShouldBePositive
        *  5) Аннотация @Test может использовать дополнительне параметры
        *       expected - код в тесте проверяется на генерацию определенного исключения
        *       timeout - код в тесте должен отработать не более указанного времени (иначе тест завален) */

        /* Для проверки ожидание/ реальность JUnit содержит следующие методы:
        *  assertTrue() - проверяет вернул ли метод (помеченный аннотацией @Test) значение true
        *  assertFalse() - проверка вернул ли метод false
        *  assertEquals() - фактический результат выполнения метода совпадает с ожидаемым
        *  assertArrayEquals() - фактический результат выполнения метода совпадает с ожидаемым (проверка для массивов
        *  assertNotEquals() - фактический результат выполнения метода НЕ совпадает с ожидаемым
        *  assertSame() -
        *  assertNotSame()
        *  assertFail - тестовый сценарий гарантированно валится
        *  assertEquals() использует метод equals(), если он определен. Таким образом, можно использовать свой принцип
        *  сравнения объектов. Если он не определен - работает как assertSame().
        *  assertSame() просто сравнивает объекты при помощи оператора ==, то есть проверяет, являются ли параметры
        *  ссылками на один и тот же объект. Отсюда следует, что для параметров типа Object разницы нет.*/


}
